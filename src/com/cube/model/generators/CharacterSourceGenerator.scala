package com.cube.model.generators
import com.cube.model._

// generates an image of a letter centered around the 0,0,0 axis. The letter is 8x8x3 points
// in dimension.
class CharacterSceneGenerator(char: Char) extends SceneGenerator {
 
     lazy val characterAsFrame =   new AnimationFrame(CharacterSceneGenerator.convertToPoints(char))
    
     def nextFrame(): AnimationFrame = characterAsFrame
}

// the code for converting a Char to a list of points.
object CharacterSceneGenerator  {

  //converts the character passed in to a list of points that draw the character
  // in 3d.
  //assumes that char is in the list of valid chars otherwise error thrown
  def convertToPoints(char: Char): List[Point] = { 
        // bitMaskGrid = 8x8 matrix of booleans - true at [x,y] means show a dot at that point.
        val bitMaskGrid = rawCharacterSet.getOrElse(char, Nil).map( row => toBitList(row,256))
        val character = for { x : Int <- 0 to charWidth-1
              				  y: Int <- 0 to  charHeight-1 if (bitMaskGrid(y)(x))
                              z: Int <- -charThickness/2 to charThickness/2} // give thickness to character
               				  yield  Point(x-charWidth/2,y-charWidth/2,z)   //-4 to center on zero                                 
       character.toList                                          
  } 
  
  // convert a number into a list of bits -  each bit being a boolean : 
  // true meaning the bit is on, false meaning its off
  // mask = biggest bit in the value that you want to mask against. All values > mask
  // will be ignored.
  def toBitList(value : Int, mask: Int) : List[Boolean] =  {
        def isMaskSet(test : Int, mask: Int)  = {(value & mask) != 0}
    	mask match {
    		case 1 => isMaskSet(value,mask) :: Nil
    		case _ => isMaskSet(value,mask) :: toBitList(value, mask/2)
      }
  }
  
  
  // the 8x8 2d definitions of characters
  val charWidth=8 
  val charHeight=8
  val charThickness=3  // assumes an odd number.. Thickness auto generated because characters are 2D..
  
  //bit map representations of characters (taken from the web )
  // each row represents a character as an 8x8 matrix of bits (eachh byte is a row)
  val rawCharacterSet : Map[Char,List[Int]] =  Map(
    	' ' -> (0 ::  0 ::  0 ::  0 ::  0 ::  0 ::  0 ::  0 ::  Nil), // -- 32 ( )
    	'!' -> (0 :: 16 :: 16 :: 16 :: 16 ::  0 :: 16 ::  0 ::  Nil), // -- 33 (!)
    	'\"' -> (0 :: 36 :: 36 ::  0 ::  0 ::  0 ::  0 ::  0 ::  Nil), // -- 34 (")
    	'#' -> (0 :: 36 ::126 :: 36 :: 36 ::126 :: 36 ::  0 ::  Nil), // -- 35 (#)
    	'$' -> (0 ::  8 :: 62 :: 40 :: 62 :: 10 :: 62 ::  8 ::  Nil), // -- 36 ($)
    	'%' -> (0 :: 98 ::100 ::  8 :: 16 :: 38 :: 70 ::  0 ::  Nil), // -- 37 (%)
    	'&' -> (0 :: 16 :: 40 :: 16 :: 42 :: 68 :: 58 ::  0 ::  Nil), // -- 38 (&)
    	'\'' -> (0 ::  8 :: 16 ::  0 ::  0 ::  0 ::  0 ::  0 ::  Nil), // -- 39 (')
    	'(' -> (0 ::  4 ::  8 ::  8 ::  8 ::  8 ::  4 ::  0 ::  Nil), // -- 40 (()
    	')' -> (0 :: 32 :: 16 :: 16 :: 16 :: 16 :: 32 ::  0 ::  Nil), // -- 41 ())
    	'*' -> (0 ::  0 :: 20 ::  8 :: 62 ::  8 :: 20 ::  0 ::  Nil), // -- 42 (*)
    	'+' -> (0 ::  0 ::  8 ::  8 :: 62 ::  8 ::  8 ::  0 ::  Nil), // -- 43 (+)
    	',' -> (0 ::  0 ::  0 ::  0 ::  0 ::  8 ::  8 :: 16 ::  Nil), // -- 44 (,)
    	'-' -> (0 ::  0 ::  0 ::  0 :: 62 ::  0 ::  0 ::  0 ::  Nil), // -- 45 (-)
    	'.' -> (0 ::  0 ::  0 ::  0 ::  0 :: 24 :: 24 ::  0 ::  Nil), // -- 46 (.)
    	'/' -> (0 ::  0 ::  2 ::  4 ::  8 :: 16 :: 32 ::  0 ::  Nil), // -- 47 (/)
    	'0' -> (0 :: 60 :: 70 :: 74 :: 82 :: 98 :: 60 ::  0 ::  Nil), // -- 48 (0)
    	'1' -> (0 :: 24 :: 40 ::  8 ::  8 ::  8 :: 62 ::  0 ::  Nil), // -- 49 (1)
    	'2' -> (0 :: 60 :: 66 ::  2 :: 60 :: 64 ::126 ::  0 ::  Nil), // -- 50 (2)
    	'3' -> (0 :: 60 :: 66 :: 12 ::  2 :: 66 :: 60 ::  0 ::  Nil), // -- 51 (3)
    	'4' -> (0 ::  8 :: 24 :: 40 :: 72 ::126 ::  8 ::  0 ::  Nil), // -- 52 (4)
    	'5' -> (0 ::126 :: 64 ::124 ::  2 :: 66 :: 60 ::  0 ::  Nil), // -- 53 (5)
    	'6' -> (0 :: 60 :: 64 ::124 :: 66 :: 66 :: 60 ::  0 ::  Nil), // -- 54 (6)
    	'7' -> (0 ::126 ::  2 ::  4 ::  8 :: 16 :: 16 ::  0 ::  Nil), // -- 55 (7)
    	'8' -> (0 :: 60 :: 66 :: 60 :: 66 :: 66 :: 60 ::  0 ::  Nil), // -- 56 (8)
    	'9' -> (0 :: 60 :: 66 :: 66 :: 62 ::  2 :: 60 ::  0 ::  Nil), // -- 57 (9)
    	':' -> (0 ::  0 ::  0 :: 16 ::  0 ::  0 :: 16 ::  0 ::  Nil), // -- 58 (:)
    	';' -> (0 ::  0 :: 16 ::  0 ::  0 :: 16 :: 16 :: 32 ::  Nil), // -- 59 (;)
    	'<' -> (0 ::  0 ::  4 ::  8 :: 16 ::  8 ::  4 ::  0 ::  Nil), // -- 60 (<)
    	'=' -> (0 ::  0 ::  0 :: 62 ::  0 :: 62 ::  0 ::  0 ::  Nil), // -- 61 (=)
    	'>' -> (0 ::  0 :: 16 ::  8 ::  4 ::  8 :: 16 ::  0 ::  Nil), // -- 62 (>)
    	'?' -> (0 :: 60 :: 66 ::  4 ::  8 ::  0 ::  8 ::  0 ::  Nil), // -- 63 (?)
    	'@' -> (0 :: 60 :: 74 :: 86 :: 94 :: 64 :: 60 ::  0 ::  Nil), // -- 64 (@)
    	'A' -> (0 :: 60 :: 66 :: 66 ::126 :: 66 :: 66 ::  0 ::  Nil), // -- 65 (A)
    	'B' -> (0 ::124 :: 66 ::124 :: 66 :: 66 ::124 ::  0 ::  Nil), // -- 66 (B)
    	'C' -> (0 :: 60 :: 66 :: 64 :: 64 :: 66 :: 60 ::  0 ::  Nil), // -- 67 (C)
    	'D' -> (0 ::120 :: 68 :: 66 :: 66 :: 68 ::120 ::  0 ::  Nil), // -- 68 (D)
    	'E' -> (0 ::126 :: 64 ::124 :: 64 :: 64 ::126 ::  0 ::  Nil), // -- 69 (E)
    	'F' -> (0 ::126 :: 64 ::124 :: 64 :: 64 :: 64 ::  0 ::  Nil), // -- 70 (F)
    	'G' -> (0 :: 60 :: 66 :: 64 :: 78 :: 66 :: 60 ::  0 ::  Nil), // -- 71 (G)
    	'H' -> (0 :: 66 :: 66 ::126 :: 66 :: 66 :: 66 ::  0 ::  Nil), // -- 72 (H)
    	'I' -> (0 :: 62 ::  8 ::  8 ::  8 ::  8 :: 62 ::  0 ::  Nil), // -- 73 (I)
    	'J' -> (0 ::  2 ::  2 ::  2 :: 66 :: 66 :: 60 ::  0 ::  Nil), // -- 74 (J)
    	'K' -> (0 :: 68 :: 72 ::112 :: 72 :: 68 :: 66 ::  0 ::  Nil), // -- 75 (K)
    	'L' -> (0 :: 64 :: 64 :: 64 :: 64 :: 64 ::126 ::  0 ::  Nil), // -- 76 (L)
    	'M' -> (0 :: 66 ::102 :: 90 :: 66 :: 66 :: 66 ::  0 ::  Nil), // -- 77 (M)
    	'N' -> (0 :: 66 :: 98 :: 82 :: 74 :: 70 :: 66 ::  0 ::  Nil), // -- 78 (N)
    	'O' -> (0 :: 60 :: 66 :: 66 :: 66 :: 66 :: 60 ::  0 ::  Nil), // -- 79 (O)
    	'P' -> (0 ::124 :: 66 :: 66 ::124 :: 64 :: 64 ::  0 ::  Nil), // -- 80 (P)
    	'Q' -> (0 :: 60 :: 66 :: 66 :: 82 :: 74 :: 60 ::  0 ::  Nil), // -- 81 (Q)
    	'R' -> (0 ::124 :: 66 :: 66 ::124 :: 68 :: 66 ::  0 ::  Nil), // -- 82 (R)
    	'S' -> (0 :: 60 :: 64 :: 60 ::  2 :: 66 :: 60 ::  0 ::  Nil), // -- 83 (S)
    	'T' -> (0 ::254 :: 16 :: 16 :: 16 :: 16 :: 16 ::  0 ::  Nil), // -- 84 (T)
    	'U' -> (0 :: 66 :: 66 :: 66 :: 66 :: 66 :: 60 ::  0 ::  Nil), // -- 85 (U)
    	'V' -> (0 :: 66 :: 66 :: 66 :: 66 :: 36 :: 24 ::  0 ::  Nil), // -- 86 (V)
    	'W' -> (0 :: 66 :: 66 :: 66 :: 66 :: 90 :: 36 ::  0 ::  Nil), // -- 87 (W)
    	'X' -> (0 :: 66 :: 36 :: 24 :: 24 :: 36 :: 66 ::  0 ::  Nil), // -- 88 (X)
    	'Y' -> (0 ::130 :: 68 :: 40 :: 16 :: 16 :: 16 ::  0 ::  Nil), // -- 89 (Y)
    	'Z' -> (0 ::126 ::  4 ::  8 :: 16 :: 32 ::126 ::  0 ::  Nil), // -- 90 (Z)
    	'[' -> (0 :: 14 ::  8 ::  8 ::  8 ::  8 :: 14 ::  0 ::  Nil), // -- 91 ([)
    	'\\' -> (0 ::  0 :: 64 :: 32 :: 16 ::  8 ::  4 ::  0 ::  Nil), // -- 92 (\)
    	']' -> (0 ::112 :: 16 :: 16 :: 16 :: 16 ::112 ::  0 ::  Nil), // -- 93 (])
    	'^' -> (0 :: 16 :: 56 :: 84 :: 16 :: 16 :: 16 ::  0 ::  Nil), // -- 94 (^)
    	'_' -> (0 ::  0 ::  0 ::  0 ::  0 ::  0 ::  0 ::255 ::  Nil), // -- 95 (_)
    	'`' -> (0 :: 28 :: 34 ::120 :: 32 :: 32 ::126 ::  0 ::  Nil), // -- 96 (`)
    	'a' -> (0 ::  0 :: 56 ::  4 :: 60 :: 68 :: 60 ::  0 ::  Nil), // -- 97 (a)
    	'b' -> (0 :: 32 :: 32 :: 60 :: 34 :: 34 :: 60 ::  0 ::  Nil), // -- 98 (b)
    	'c' -> (0 ::  0 :: 28 :: 32 :: 32 :: 32 :: 28 ::  0 ::  Nil), // -- 99 (c)
    	'd' -> (0 ::  4 ::  4 :: 60 :: 68 :: 68 :: 60 ::  0 ::  Nil), // -- 100 (d)
    	'e' -> (0 ::  0 :: 56 :: 68 ::120 :: 64 :: 60 ::  0 ::  Nil), // -- 101 (e)
    	'f' -> (0 :: 12 :: 16 :: 24 :: 16 :: 16 :: 16 ::  0 ::  Nil), // -- 102 (f)
    	'g' -> (0 ::  0 :: 60 :: 68 :: 68 :: 60 ::  4 :: 56 ::  Nil), // -- 103 (g)
    	'h' -> (0 :: 64 :: 64 ::120 :: 68 :: 68 :: 68 ::  0 ::  Nil), // -- 104 (h)
    	'i' -> (0 :: 16 ::  0 :: 48 :: 16 :: 16 :: 56 ::  0 ::  Nil), // -- 105 (i)
    	'j' -> (0 ::  4 ::  0 ::  4 ::  4 ::  4 :: 36 :: 24 ::  Nil), // -- 106 (j)
    	'k' -> (0 :: 32 :: 40 :: 48 :: 48 :: 40 :: 36 ::  0 ::  Nil), // -- 107 (k)
    	'l' -> (0 :: 16 :: 16 :: 16 :: 16 :: 16 :: 12 ::  0 ::  Nil), // -- 108 (l)
    	'm' -> (0 ::  0 ::104 :: 84 :: 84 :: 84 :: 84 ::  0 ::  Nil), // -- 109 (m)
    	'n' -> (0 ::  0 ::120 :: 68 :: 68 :: 68 :: 68 ::  0 ::  Nil), // -- 110 (n)
    	'o' -> (0 ::  0 :: 56 :: 68 :: 68 :: 68 :: 56 ::  0 ::  Nil), // -- 111 (o)
    	'p' -> (0 ::  0 ::120 :: 68 :: 68 ::120 :: 64 :: 64 ::  Nil), // -- 112 (p)
    	'q' -> (0 ::  0 :: 60 :: 68 :: 68 :: 60 ::  4 ::  6 ::  Nil), // -- 113 (q)
    	'r' -> (0 ::  0 :: 28 :: 32 :: 32 :: 32 :: 32 ::  0 ::  Nil), // -- 114 (r)
    	's' -> (0 ::  0 :: 56 :: 64 :: 56 ::  4 ::120 ::  0 ::  Nil), // -- 115 (s)
    	't' -> (0 :: 16 :: 56 :: 16 :: 16 :: 16 :: 12 ::  0 ::  Nil), // -- 116 (t)
    	'u' -> (0 ::  0 :: 68 :: 68 :: 68 :: 68 :: 56 ::  0 ::  Nil), // -- 117 (u)
    	'v' -> (0 ::  0 :: 68 :: 68 :: 40 :: 40 :: 16 ::  0 ::  Nil), // -- 118 (v)
    	'w' -> (0 ::  0 :: 68 :: 84 :: 84 :: 84 :: 40 ::  0 ::  Nil), // -- 119 (w)
    	'x' -> (0 ::  0 :: 68 :: 40 :: 16 :: 40 :: 68 ::  0 ::  Nil), // -- 120 (x)
    	'y' -> (0 ::  0 :: 68 :: 68 :: 68 :: 60 ::  4 :: 56 ::  Nil), // -- 121 (y)
    	'z' -> (0 ::  0 ::124 ::  8 :: 16 :: 32 ::124 ::  0 ::  Nil), // -- 122 (z)
    	'{' -> (0 :: 14 ::  8 :: 48 ::  8 ::  8 :: 14 ::  0 ::  Nil), // -- 123 ({)
    	'|' -> (0 ::  8 ::  8 ::  8 ::  8 ::  8 ::  8 ::  0 ::  Nil), // -- 124 (|)
    	'}' -> (0 ::112 :: 16 :: 12 :: 16 :: 16 ::112 ::  0 ::  Nil), // -- 125 (})
    	'~' -> (0 :: 20 :: 40 ::  0 ::  0 ::  0 ::  0 ::  0 ::  Nil)  // -- 126 (~)
    )

}


